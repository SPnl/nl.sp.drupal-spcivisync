<?php

// ini_set('display_errors','on');
// error_reporting(E_ALL);
// Implements hook_menu -> iig zo lang drush nog niet werkt

function spcivisync_menu() {

  $items = array();

  $items['admin/config/sp/spcivisync/sync/%'] = array(
    'title'            => 'SP CiviCRM-synchronisatie uitvoeren',
    'type'             => MENU_CALLBACK,
    'page callback'    => 'spcivisync_menu_sync',
    'page arguments'   => array(5),
    'access callback' => 'sprbs_access_check',
  );

  $items['admin/config/sp/spcivisync'] = array(
    'title'            => 'SP Civicrm synchronizatie',
    'description'      => 'Instellingen voor SP CiviCRM-synchronisatie.',
    'type'             => MENU_NORMAL_ITEM,
    'page callback'    => 'spcivisync_admin_list_rules',
    'file'             => 'spcivisync.page-admin.inc',
    'access callback' => 'sprbs_access_check',
  );

  $items['admin/config/sp/spcivisync/list-rules'] = array(
    'title'            => 'Overzicht regels',
    'type'             => MENU_DEFAULT_LOCAL_TASK,
    'weight'           => 0,
    'access callback' => 'sprbs_access_check',
  );

  $items['admin/config/sp/spcivisync/add-relation-role-rule'] = array(
    'title'            => 'Relatie-rol',
    'type'             => MENU_LOCAL_TASK,
    'weight'           => 1,
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('spcivisync_admin_add_relation_role_rules'),
    'file'             => 'spcivisync.page-admin.inc',
    'access callback' => 'sprbs_access_check',
  );

  $items['admin/config/sp/spcivisync/add-group-role-rule'] = array(
    'title'            => 'Groep-rol',
    'type'             => MENU_LOCAL_TASK,
    'weight'           => 1,
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('spcivisync_admin_add_group_role_rules'),
    'file'             => 'spcivisync.page-admin.inc',
    'access callback' => 'sprbs_access_check',
  );

  $items['admin/config/sp/spcivisync/add-field-field-rule'] = array(
    'title'            => 'Veld - veld',
    'type'             => MENU_LOCAL_TASK,
    'weight'           => 2,
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('spcivisync_admin_add_field_field_rules'),
    'file'             => 'spcivisync.page-admin.inc',
    'access callback' => 'sprbs_access_check',
  );

  $items['admin/config/sp/spcivisync/add-relation-field-rule'] = array(
    'title'            => 'Relatie - veld',
    'type'             => MENU_LOCAL_TASK,
    'weight'           => 3,
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('spcivisync_admin_add_relation_field_rules'),
    'file'             => 'spcivisync.page-admin.inc',
    'access callback' => 'sprbs_access_check',
  );

  $items['admin/config/sp/spcivisync/test-rule'] = array(
    'title'            => 'Test regels',
    'type'             => MENU_LOCAL_TASK,
    'weight'           => 4,
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('spcivisync_admin_test_rules'),
    'file'             => 'spcivisync.page-admin.inc',
    'access callback' => 'sprbs_access_check',
  );

  $items['admin/config/sp/spcivisync/sync'] = array(
    'title'            => 'Sync',
    'type'             => MENU_LOCAL_TASK,
    'weight'           => 5,
    'page callback'    => 'spcivisync_admin_sync',
    'file'             => 'spcivisync.page-admin.inc',
    'access callback' => 'sprbs_access_check',
  );

  $items['admin/config/sp/spcivisync/delete/%/%'] = array(
    'page callback' => 'spcivisync_delete',
    'page arguments' => array(5,6),
    'type'             => MENU_CALLBACK,
    'file'             => 'spcivisync.page-admin.inc',
    'access callback' => 'sprbs_access_check',
  );
  return $items;
}

function spcivisync_menu_sync($user_id) {
  // Check if all users should be synced.
  if (empty($user_id) || $user_id == 'all') {
    $users = spcivisync_get_users();
    spcivisync_sync_roles($users);
    // Possibly new user, so update.
    $users = spcivisync_get_users();
    spcivisync_sync_users($users);
  }
  else {
    // Sync single user.
    if (filter_var($user_id, FILTER_VALIDATE_INT)) {
      $drupal_user = user_load($user_id);
      if ($drupal_user !== FALSE) {
        spcivisync_sync_users(array($drupal_user));
      }
    }
  }
  drupal_set_message('CiviCRM Drupal sync afgerond.');
  drupal_goto('admin/config/sp/spcivisync/sync');
}

function spcivisync_sync_users($users = array(), $test = FALSE, $drush_log = FALSE) {
  if (empty($users)) {
    $users = spcivisync_get_users();
    spcivisync_sync_roles($users, $test, $drush_log);
    // Possibly added new users.
    $users = spcivisync_get_users();
    spcivisync_sync_fields($users, $test, $drush_log);
  }
  else {
    spcivisync_sync_roles($users, $test, $drush_log);
    spcivisync_sync_fields($users, $test, $drush_log);
  }
}

function spcivisync_get_civi_relationships($sync = TRUE) {
  if ($sync) {
    set_time_limit(0);
    $civiapi     = spciviapi_get_api();
    $relationships = array();

    $civiapi->RelationshipType->Get(array(
      'option.limit'          => 9999,
    ));
    $relationships_results = $civiapi->result();
    if (isset($relationships_results->values)) {
      foreach ($relationships_results->values as $value) {
        $relationships[$value->id] = $value->label_a_b . ' / ' . $value->label_b_a;
      }
      variable_set('spcivisync_relationships', $relationships);
      return $relationships;
    }
    else {
      if (spcivisync_show_message()) {
        drupal_set_message('Error syncing civicrm relationship types, using saved data.', 'warning');
      }
    }
  }
  $relationships = variable_get('spcivisync_relationships', 'FALSE');
  return $relationships;
}

function spcivisync_get_civi_groups($sync = TRUE) {
  if ($sync) {
    set_time_limit(0);
    $civiapi     = spciviapi_get_api();
    $groups = array();

    $civiapi->Group->Get(array(
      'sequential'            => 1,
      'option.limit'          => 9999,
    ));
    $groups_results = $civiapi->result();
    if (isset($groups_results->values)) {
      foreach ($groups_results->values as $value) {
        $groups[$value->id] = $value->title;
      }
      natcasesort($groups);
      variable_set('spcivisync_groups', $groups);
      return $groups;
    }
    else {
      if (spcivisync_show_message()) {
        drupal_set_message('Error syncing civicrm relationship types, using saved data.', 'warning');
      }
    }
  }
  $groups = variable_get('spcivisync_groups', 'FALSE');
  return $groups;
}

function spcivisync_sync_roles($users = array(), $test = FALSE, $drush_log = FALSE) {
  set_time_limit(0);

  // Connect to civiapi.
  $civiapi     = spciviapi_get_api();

  // Settings and variables.
  $rules = variable_get('spcivisync_rules');

  $users_roles = array();
  if (!empty($rules['groups-roles'])) {

    // Create mapping roles to groups.
    foreach ($rules['groups-roles'] as $key => $rule_values) {
      foreach ($rule_values['civi_groups'] as $group_id => $group_name) {
        foreach ($rule_values['drupal_roles'] as $role_id => $role_name) {
          $mapping['roles_groups'][$role_id][$group_id] = $group_id;
        }
      }
    }

    // Create mapping civi group users to drupal roles.
    if (isset($mapping['roles_groups'])) {
      foreach ($mapping['roles_groups'] as $role_id => $groups) {
        sort($groups);
        foreach ($groups as $group_id) {
          // Get users in group.
          $query = array(
            'sequential' => 1,
            'option.limit' => 9999,
            'return' => 'id',
            'group' => $group_id,
            'is_active' => 1,
          );
          if (count($users) == 1) {
            $query['id'] = $users[0]->name;
          }
          $civiapi->Contact->Get($query);
          $results = $civiapi->result();
          if (isset($results->values)) {
            foreach ($results->values as $contact) {
              if (isset($contact->contact_id)) {
                if (filter_var($contact->contact_id, FILTER_VALIDATE_INT) !== FALSE) {
                  $users_roles[$contact->contact_id][$role_id] = $role_id;
                }
              }
            }
          }
        }
      }
    }
  }

  if (!empty($rules['relations-roles'])) {
    // Create mapping relation to roles.
    foreach ($rules['relations-roles'] as $key => $rule_values) {
      foreach ($rule_values['civi_relations'] as $relation_id => $relation_name) {
        foreach ($rule_values['drupal_roles'] as $role_id => $role_name) {
          $mapping['roles_relations'][$role_id][$relation_id] = $relation_id;
        }
      }
    }

    // Add mapping civi relation users to drupal roles.
    if (isset($mapping['roles_relations'])) {
      foreach ($mapping['roles_relations'] as $role_id => $relations) {
        // Get users in group.
        $query = array(
          'sequential' => 1,
          'option.limit' => 9999,
          'relationship_type_id' => array('IN' => $relations),
          'is_active' => 1,
        );
        if (count($users) == 1) {
          $query['contact_id'] = $users[0]->name;
        }
        $civiapi->Relationship->Get($query);
        $results = $civiapi->result();
        if (isset($results->values)) {
          foreach ($results->values as $relationship) {
            if (isset($relationship->contact_id_a)) {
              if (filter_var($relationship->contact_id_a, FILTER_VALIDATE_INT) !== FALSE) {
                $users_roles[$relationship->contact_id_a][$role_id] = $role_id;
              }
            }
          }
        }
      }
    }
  }

  // Set users roles.
  $admin_rid = user_role_load_by_name('administrator')->rid;
  $authenticated_user_role = user_role_load_by_name('authenticated user');
  $roles_to_set = spcivisync_get_roles_to_sync();

  if ($test) {
    drupal_set_message('<strong>Synchronizatie CiviCRM groepen en relaties met Drupal rollen.</strong>');
  }
  foreach ($users_roles as $username => $roles) {
    if ($drush_log) {
      drush_log('Syncing: ' . $username . ' (roles)', 'ok');
    }
    // Check if user exists.
    $user = user_load_by_name($username);
    if (!$user) {
      if ($test) {
        drupal_set_message('Created user ' . $user->name);
      }
      else {
        // Create user.
        $password = $username . user_password(4);

        // Set up the user fields.
        $fields = array(
          'name' => $username,
          'mail' => $username . '@spnet.nl',
          'pass' => $username . user_password(4),
          'status' => 1,
          'init' => 'email address',
          'roles' => array(),
        );
        $user = user_save('', $fields);
        // Create authmap record.
        if (!user_get_authmaps("spoauth_" . $username)) {
          $authname = 'spoauth_' . $username;
          user_set_authmaps($user, array('authname_spoauthconsumer' => $authname));
        }

        if (!$user) {
          if (spcivisync_show_message()) {
            drupal_set_message('Het is niet gelukt een account voor u aan te maken op deze website.', 'error');
          }
        }
      }
    }
    else {
      if (!strpos($user->mail, '@spnet')) {
        $user->mail = $username . '@spnet.nl';
        $user->pass = $username . user_password(4);
        $user = user_save($user);
      }
    }
    // Make sure administrators roles are not changed.
    if (!isset($user->roles[$admin_rid])) {
      $user_roles = $user->roles;
      // Unset role that is managed by sync rules, but should not be set.
      foreach ($user_roles as $rid => $role_name) {
        if (array_key_exists($rid, $roles_to_set)) {
          if (!in_array($rid, $roles)) {
            if ($test) {
              drupal_set_message('Unset role "' . $roles_to_set[$rid] . '"');
            }
            else {
              unset ($user_roles[$rid]);
            }
          }
        }
      }
      // Set sync roles.
      foreach ($roles as $role_id) {
        if ($test) {
          drupal_set_message('Set role "' . $roles_to_set[$role_id] . '"');
        }
        else {
          $user_roles[$role_id] = $roles_to_set[$role_id];
        }
      }
      if (!$test) {
        // Set roles for user.
        $user->roles = $user_roles;
        $user = user_save($user);
      }
    }
  }

  // Remove set roles when user not in civi.
  if (count($users) == 1) {
    $drupal_users = $users;
  }
  else {
    $drupal_users = spcivisync_get_users();
  }
  foreach ($drupal_users as $drupal_user) {
    if (!array_key_exists($drupal_user->name, $users_roles)) {
      foreach ($roles_to_set as $rid => $role_name) {
        if (user_has_role($rid, $drupal_user)) {
          $user_roles = $drupal_user->roles;
          unset($user_roles[$rid]);
          if ($test) {
            drupal_set_message('Unset role "' . $roles_to_set[$rid] . ' for user ' . $drupal_user->name . '"');
          }
          else {
            $drupal_user->roles = $user_roles;
            user_save($drupal_user);
          }
          continue;
        }
      }
    }
  }
}

function spcivisync_get_roles() {
  $sync_roles = user_roles(TRUE);
  unset($sync_roles[user_role_load_by_name('administrator')->rid]);
  return $sync_roles;
}

function spcivisync_get_user_civi_groups($user) {
  set_time_limit(0);

  // Connect to civiapi.
  $civiapi     = spciviapi_get_api();

  // Get civicrm relationships for user.
  $civiapi->GroupContact->Get(array(
    'sequential' => 1,
    'option.limit' => 9999,
    'return' => 'id,is_active',
    'contact_id' => $user->name,
    'is_active' => 1,
  ));
  $civi_relationships_results = $civiapi->result();
  if (isset($civi_relationships_results->values)) {
    return $civi_relationships_results->values;
  }
  return FALSE;
}

function spcivisync_get_user_civi_relations($user) {
  set_time_limit(0);

  // Connect to civiapi.
  $civiapi     = spciviapi_get_api();

  // Get civicrm relationships for user.
  $civiapi->Relationship->Get(array(
    'sequential' => 1,
    'option.limit' => 9999,
    'return' => 'relationship_type_id,is_active,start_date,end_date',
    'contact_id_a' => $user->name,
    'is_active' => 1,
  ));
  $civi_relationships_results = $civiapi->result();
  if (isset($civi_relationships_results->values)) {
    return $civi_relationships_results->values;
  }
  return FALSE;
}

function spcivisync_check_date($civi_relationship) {
  $timezone = new DateTimeZone(date_default_timezone(FALSE));
  $date = new DateTime('now', $timezone);
  $date_formatted = $date->format('Y-m-d');
  // Check civi relation start and end dates.
  if (
    (empty($civi_relationship->start_date) ||
    $civi_relationship->start_date <= $date_formatted) &&
    (empty($civi_relationship->end_date) ||
    $civi_relationship->end_date > $date_formatted)
  ) {
    return TRUE;
  }
  return FALSE;
}

function spcivisync_get_civi_contact_fields($sync = TRUE) {
  if ($sync) {
    set_time_limit(0);
    $civiapi     = spciviapi_get_api();
    $fields = array();
    $civiapi->Contact->Getfields(array(
      'sequential' => 1,
      'option.limit' => 9999,
    ));
    $civi_fields_results = $civiapi->result();
    if (isset($civi_fields_results->values)) {
      foreach ($civi_fields_results->values as $value) {
        if (isset($value->title) && isset($value->name)) {
          $results[$value->name] = $value->title;
        }
        elseif (isset($value->label) && isset($value->groupTitle) && isset($value->name)) {
          $results[$value->name . ':group:'] = $value->groupTitle . ': ' . $value->label;
        }
      }
      variable_set('spcivisync_contact_fields', $results);
      return $results;
    }
    else {
      if (spcivisync_show_message()) {
        drupal_set_message('Error syncing civicrm contact fields, using saved data.', 'warning');
      }
    }
  }
  $results = variable_get('spcivisync_contact_fields', 'FALSE');
  return $results;
}

function spcivisync_get_civi_email_locations($sync = TRUE) {
  if ($sync) {
    set_time_limit(0);
    $civiapi     = spciviapi_get_api();
    $fields = array();
    $civiapi->Email->Getoptions(array(
      'sequential' => 1,
      'option.limit' => 9999,
      'field'          => 'location_type',
    ));
    $civi_locations_results = $civiapi->result();
    if (isset($civi_locations_results->values)) {
      foreach ($civi_locations_results->values as $value) {
        $results[$value->key] = $value->value;
      }
      variable_set('spcivisync_email_locations', $results);
      return $results;
    }
    else {
      if (spcivisync_show_message()) {
        drupal_set_message('Error syncing civicrm email locations, using saved data.', 'warning');
      }
    }
  }
  $results = variable_get('spcivisync_email_locations', 'FALSE');
  return $results;
}

function spcivisync_get_civi_phone_locations($sync = TRUE) {
  if ($sync) {
    set_time_limit(0);
    $civiapi     = spciviapi_get_api();
    $fields = array();
    $civiapi->Email->Getoptions(array(
      'sequential' => 1,
      'option.limit' => 9999,
      'field'          => 'location_type',
    ));
    $civi_locations_results = $civiapi->result();
    if (isset($civi_locations_results->values)) {
      foreach ($civi_locations_results->values as $value) {
        $results[$value->key] = $value->value;
      }
      variable_set('spcivisync_phone_locations', $results);
      return $results;
    }
    else {
      if (spcivisync_show_message()) {
        drupal_set_message('Error syncing civicrm phone locations, using saved data.', 'warning');
      }
    }
  }
  $results = variable_get('spcivisync_phone_locations', 'FALSE');
  return $results;
}

function spcivisync_get_civi_phone_types($sync = TRUE) {
  if ($sync) {
    set_time_limit(0);
    $civiapi     = spciviapi_get_api();
    $fields = array();
    $civiapi->Phone->Getoptions(array(
      'sequential' => 1,
      'option.limit' => 9999,
      'field' => "phone_type_id",
    ));
    $civi_types_results = $civiapi->result();
    if (isset($civi_types_results->values)) {
      foreach ($civi_types_results->values as $value) {
        $results[$value->key] = $value->value;
      }
      variable_set('spcivisync_phone_types', $results);
      return $results;
    }
    else {
      if (spcivisync_show_message()) {
        drupal_set_message('Error syncing civicrm phone types, using saved data.', 'warning');
      }
    }
  }
  $results = variable_get('spcivisync_phone_types', 'FALSE');
  return $results;
}

function spcivisync_get_civi_address_locations($sync = TRUE) {
  if ($sync) {
    set_time_limit(0);
    $civiapi     = spciviapi_get_api();
    $fields = array();
    $civiapi->Address->Getoptions(array(
      'sequential' => 1,
      'option.limit' => 9999,
      'field'          => 'location_type',
    ));
    $civi_locations_results = $civiapi->result();
    if (isset($civi_locations_results->values)) {
      foreach ($civi_locations_results->values as $value) {
        $results[$value->key] = $value->value;
      }
      variable_set('spcivisync_address_locations', $results);
      return $results;
    }
    else {
      if (spcivisync_show_message()) {
        drupal_set_message('Error syncing civicrm address locations, using saved data.', 'warning');
      }
    }
  }
  $results = variable_get('spcivisync_address_locations', 'FALSE');
  return $results;
}

function spcivisync_get_civi_address_fields($sync = TRUE) {
  if ($sync) {
    set_time_limit(0);
    $civiapi     = spciviapi_get_api();
    $fields = array();
    $civiapi->Address->getfields(array(
      'sequential' => 1,
      'option.limit' => 9999,
    ));
    $civi_fields_results = $civiapi->result();
    if (isset($civi_fields_results->values)) {
      foreach ($civi_fields_results->values as $value) {
        if (isset($value->title) && isset($value->name)) {
          $results[$value->name] = $value->title;
        }
        elseif (isset($value->label) && isset($value->groupTitle) && isset($value->name)) {
          $results[$value->name] = $value->groupTitle . ': ' . $value->label;
        }
      }
      variable_set('spcivisync_address_fields', $results);
      return $results;
    }
    else {
      if (spcivisync_show_message()) {
        drupal_set_message('Error syncing civicrm address fields, using saved data.', 'warning');
      }
    }
  }
  $results = variable_get('spcivisync_address_fields', 'FALSE');
  return $results;
}

function spcivisync_get_account_fields() {
  $instances = field_info_instances('user', 'user');
  foreach ($instances as $instance) {
    $results[$instance['field_name']] = $instance['label'];
  }
  return $results;
}

function spcivisync_sync_fields($users = array(), $test = FALSE, $drush_log = FALSE) {
  set_time_limit(0);

  // Connect to civiapi.
  $civiapi = spciviapi_get_api();

  // Settings and variables.
  $rules = variable_get('spcivisync_rules');

  // Sync fields.
  if (!empty($rules['field-field'])) {
    if ($test) {
      drupal_set_message('<strong>Synchronizatie CiviCRM velden met Drupal velden.</strong>');
    }

    foreach ($rules['field-field'] as $rule) {
      if (!empty($rule['simple'])) {
        spcivisync_sync_simple_field($users, $rule['simple'], $civiapi, $test, $drush_log);
      }
      elseif (!empty($rule['email'])) {
        spcivisync_sync_email_field($users, $rule['email'], $civiapi, $test, $drush_log);
      }
      elseif (!empty($rule['phone'])) {
        spcivisync_sync_phone_field($users, $rule['phone'], $civiapi, $test, $drush_log);
      }
      elseif (!empty($rule['address'])) {
        spcivisync_sync_address_field($users, $rule['address'], $civiapi, $test, $drush_log);
      }
    }
  }

  // Sync relation-field.
  if (!empty($rules['relation-field'])) {

    if ($test) {
      drupal_set_message('<strong>Synchronizatie CiviCRM relaties met Drupal velden.</strong>');
    }

    foreach ($rules['relation-field'] as $rule) {
      spcivisync_sync_relation_field($users, $rule, $civiapi, $test, $drush_log);
    }
  }
  return;
}

function spcivisync_sync_simple_field($users, $rule, $civiapi, $test = FALSE, $drush_log = FALSE) {
  $simple_field = $rule['simple_field'];
  $drupal_field = $rule['drupal_field'];

  // Check if it is a group field, and if so, get the group name instead of the id.
  if (strpos($simple_field, ':group:')) {
    // Set display name.
    $simple_field = substr_replace($simple_field, '', strpos($simple_field, ':group:'));
    $groupfield = TRUE;
  }
  else {
    $groupfield = FALSE;
  }

  foreach ($users as $user) {
    // Get civicrm fields for user.
    if ($groupfield) {
      $civiapi->Contact->Get(array(
        'sequential' => 1,
        'return' => $simple_field,
        'id' => $user->name,
      ));
      $results = $civiapi->result();
      if (!empty($results->values)) {
        $id = $results->values[0]->$simple_field;
        // Get display name.
        $civiapi->Contact->Get(array(
          'sequential' => 1,
          'return' => 'display_name',
          'id' => $id,
        ));
        $results = $civiapi->result();
        if (!empty($results->values)) {
          $value = $results->values[0]->display_name;
          spcivisync_set_account_field_value($user, $drupal_field, $value, $test, $drush_log);
        }
        else {
          spcivisync_set_account_field_value($user, $drupal_field, '', $test, $drush_log);
          if (spcivisync_show_message()) {
            drupal_set_message(t('Geen waarde voor @field gevonden', array('@field' => $drupal_field)), 'error');
          }
        }
      }
      else {
        spcivisync_set_account_field_value($user, $drupal_field, '', $test, $drush_log);
        if (spcivisync_show_message()) {
          drupal_set_message(t('Geen waarde voor @field gevonden', array('@field' => $drupal_field)), 'error');
        }
      }
    }
    else {
      // Set plain field value.
      $civiapi->Contact->Get(array(
        'sequential' => 1,
        'return' => $simple_field,
        'id' => $user->name,
      ));
      $results = $civiapi->result();
      if (isset($results->values[0]->$simple_field)) {
        $value = $results->values[0]->$simple_field;
        spcivisync_set_account_field_value($user, $drupal_field, $value, $test, $drush_log);
      }
      else {
        spcivisync_set_account_field_value($user, $drupal_field, '', $test, $drush_log);
        if (spcivisync_show_message()) {
          drupal_set_message(t('Geen waarde voor @field gevonden', array('@field' => $drupal_field)), 'error');
        }
      }
    }
  }
}

function spcivisync_sync_email_field($users, $rule, $civiapi, $test = FALSE, $drush_log = FALSE) {

  foreach ($users as $user) {
    if (!empty($rule['email_primary_field'])) {
      $query = array(
        'sequential' => 1,
        'return' => 'email',
        'is_primary' => 1,
        'contact_id' => $user->name,
      );
    }
    else {
      $query = array(
        'sequential' => 1,
        'return' => 'email',
        'location_type_id' => $rule['email_location_field'],
        'contact_id' => $user->name,
      );
    }

    // Set plain field value.
    $civiapi->Email->Get($query);
    $results = $civiapi->result();
    if (isset($results->values[0]->email)) {
      $value = $results->values[0]->email;
      spcivisync_set_account_field_value($user, $rule['drupal_field'], $value, $test, $drush_log);
    }
    else {
      spcivisync_set_account_field_value($user, $rule['drupal_field'], '', $test, $drush_log);
      if (spcivisync_show_message()) {
        drupal_set_message(t('Geen waarde voor @field gevonden', array('@field' => $rule['drupal_field'])), 'error');
      }
    }
  }
}

function spcivisync_sync_phone_field($users, $rule, $civiapi, $test = FALSE, $drush_log = FALSE) {

  foreach ($users as $user) {
    if (!empty($rule['phone_primary_field'])) {
      $query = array(
        'sequential' => 1,
        'return' => 'phone',
        'is_primary' => 1,
        'contact_id' => $user->name,
      );
    }
    else {
      $query = array(
        'sequential' => 1,
        'return' => 'phone',
        'location_type_id' => $rule['phone_location_field'],
        'phone_type_id' => $rule['phone_type_field'],
        'contact_id' => $user->name,
      );
    }

    // Set plain field value.
    $civiapi->Phone->Get($query);
    $results = $civiapi->result();
    if (isset($results->values[0]->phone)) {
      $value = $results->values[0]->phone;
      spcivisync_set_account_field_value($user, $rule['drupal_field'], $value, $test, $drush_log);
    }
    else {
      spcivisync_set_account_field_value($user, $rule['drupal_field'], '', $test, $drush_log);
      if (spcivisync_show_message()) {
        drupal_set_message(t('Geen waarde voor @field gevonden', array('@field' => $rule['drupal_field'])), 'error');
      }
    }
  }
}

function spcivisync_sync_address_field($users, $rule, $civiapi, $test = FALSE, $drush_log = FALSE) {

  foreach ($users as $user) {
    if (!empty($rule['address_primary_field'])) {
      $query = array(
        'sequential' => 1,
        'return' => $rule['address_field'],
        'is_primary' => 1,
        'contact_id' => $user->name,
      );
    }
    else {
      $query = array(
        'sequential' => 1,
        'return' => $rule['address_field'],
        'location_type_id' => $rule['address_location_field'],
        'contact_id' => $user->name,
      );
    }

    // Set plain field value.
    $civiapi->Address->Get($query);
    $results = $civiapi->result();
    if (isset($results->values[0]->$address_field)) {
      $value = $results->values[0]->$address_field;
      spcivisync_set_account_field_value($user, $rule['drupal_field'], $value, $test, $drush_log);
    }
    else {
      spcivisync_set_account_field_value($user, $rule['drupal_field'], '', $test, $drush_log);
      if (spcivisync_show_message()) {
        drupal_set_message(t('Geen waarde voor @field gevonden', array('@field' => $rule['drupal_field'])), 'error');
      }
    }
  }
}

function spcivisync_sync_relation_field($users, $rule, $civiapi, $test = FALSE, $drush_log = FALSE) {

  foreach ($rule['civi_relation'] as $key => $title) {
    $relationship_id = $key;
  }

  foreach ($users as $user) {
    $query = array(
      'relationship_type_id' => $relationship_id,
      'contact_id_a' => $user->name,
      'is_active' => 1,
      'return' => 'contact_id_b',
    );

    // Set plain field value.
    $civiapi->Relationship->Get($query);
    $results = $civiapi->result();

    if ($results->is_error || empty($results->values)) {
      // Relationship doesn't exist.
      spcivisync_set_account_field_value($user, $rule['drupal_field'], '', $test, $drush_log);
    }
    else {
      $value = array();
      foreach ($results->values as $result) {
        $relation_contact_id = $result->contact_id_b;
        // Get contact display name.
        $query = array(
          'id' => $relation_contact_id,
          'return' => 'display_name',
        );
        $civiapi->Contact->GetSingle($query);
        $rel_result = $civiapi->result();
        if (!empty($rel_result->display_name)) {
          $value[] = $rel_result->display_name;
        }
      }
      spcivisync_set_account_field_value($user, $rule['drupal_field'], $value, $test, $drush_log);
    }
  }
}

function spcivisync_get_users() {
  $admin_rid = user_role_load_by_name('administrator')->rid;
  // Get user(s).
  $users = entity_load('user');
  // Remove anonymous user.
  unset($users[0]);

  // Remove admin users;
  foreach ($users as $id => $user) {
    // Do not sync admin users.
    if (isset($user->roles[$admin_rid])) {
      unset($users[$id]);
    }
    if (filter_var($user->name, FILTER_VALIDATE_INT) === FALSE) {
      unset($users[$id]);
    }
  }
  return $users;
}

function spcivisync_set_account_field_value($user, $fieldname, $value, $test = FALSE, $drush_log = FALSE) {
  if ($drush_log) {
    drush_log('Syncing: ' . $user->name . ' (' . $fieldname . ')', 'ok');
  }
  $user_wrapper = entity_metadata_wrapper('user', $user);
  $info = field_info_field($fieldname);
  switch ($info['type']) {
    case 'text':
      if ($info['cardinality'] === '1' && is_array($value)) {
        $value = array_shift($value);
      }
      if ($info['cardinality'] === '-1' && is_string($value)) {
        $value = array($value);
      }
      $user_wrapper->$fieldname->set($value);
      if (!$test) {
        $user_wrapper->save();
      }
      else {
        if (spcivisync_show_message()) {
          $drupal_fields = spcivisync_get_account_fields();
          $output = is_array($value) ? implode(',', $value) : $value;
          drupal_set_message('Veld: ' . $drupal_fields[$fieldname] . '<br/>Waarde: ' . $output);
        }
      }
      break;

    case 'number_integer':
      if (filter_var($value, FILTER_VALIDATE_INT)) {
        $user_wrapper->$fieldname->set($value);
        if (!$test) {
          $user_wrapper->save();
        }
        else {
          $drupal_fields = spcivisync_get_account_fields();
          if (spcivisync_show_message()) {
            drupal_set_message('Veld: ' . $drupal_fields[$fieldname] . '<br/>Waarde: ' . $value);
          }
        }
      }
      else {
        if (spcivisync_show_message()) {
          drupal_set_message('Het is niet mogelijk om de waarde "' . $value . '" op te slaan in een integer veld.', 'error');
        }
      }
      break;

    case 'date':
      if (strtotime($value)) {
        $user_wrapper->$fieldname->set(strtotime($value));
        if (!$test) {
          $user_wrapper->save();
        }
        else {
          $drupal_fields = spcivisync_get_account_fields();
          if (spcivisync_show_message()) {
            drupal_set_message('Veld: ' . $drupal_fields[$fieldname] . '<br/>Waarde: ' . $value . ' omgezet naar ' . strtotime($value) . ' (timestamp)');
          }
        }
      }
      else {
        if (spcivisync_show_message()) {
          drupal_set_message('Het is niet mogelijk om de waarde "' . $value . '" te converteren met strtotime() naar een timestamp.', 'error');
        }
      }
      break;

    default:
      if (spcivisync_show_message()) {
        drupal_set_message('Helaas, het Drupal veldtype "' . $info['type']  . '" van het veld "' . $fieldname . '" wordt nog niet ondersteund.', 'error');
      }
  }
}

function spcivisync_get_roles_to_sync() {
  $roles = array();
  $rules = variable_get('spcivisync_rules');
  if (!empty($rules['relations-roles'])) {
    foreach ($rules['relations-roles'] as $values) {
      $roles = $roles + $values['drupal_roles'];
    }
  }
  if (!empty($rules['groups-roles'])) {
    foreach ($rules['groups-roles'] as $values) {
      $roles = $roles + $values['drupal_roles'];
    }
  }
  return $roles;
}

function spcivisync_show_message() {
  $path = current_path();
  $path_alias = drupal_lookup_path('alias', $path);
  $patterns = 'admin/config/sp/spcivisync*';

  if (drupal_match_path($path, $patterns) || drupal_match_path($path_alias, $patterns)) {
    return TRUE;
  }
  return FALSE;
}

function spcivisync_entity_info_alter(&$info) {
  $info['user']['field cache'] = FALSE;
}
